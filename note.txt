FOR THE MODEL WITH ARRAY AND FILE-SYSTEM

// const users = [];
// used above when saving with array
const fs = require("fs");
const path = require("path");
const rootDir = require("../util/path");

const p = path.join(
  path.dirname(process.mainModule.filename),
  "data",
  "users.json"
);

module.exports = class User {
  constructor(username, email, password) {
    this.name = username;
    this.email = email;
    this.password = password;
  }

  save() {
    // users.push(this);
    // used above when saving with array

    fs.readFile(p, (err, fileContent) => {
      // console.log(fileContent);
      let users = [];
      if (!err) {
        // parse method takes incomming json and gives us a javascript array or object or whatever is in the file while stringify method takes in javascript object or array and converts it to json
        users = JSON.parse(fileContent);
      }
      users.push(this);
      fs.writeFile(p, JSON.stringify(users), (err) => {
        console.log(err);
      });
      console.log(users);
    });
  }

  // cbf refers to the anonymous function we passed in through fetchAll
  // The anonymous function expects an argument, in the case of error, it will display and empty array, but if everything goes right it will parse in the expected argument which is an array , then the function knows how to deal with it.
  static fetchAll(cbf) {
    // return users;
    // used above when saving with array

    fs.readFile(p, (err, fileContent) => {
      if (err) {
        cbf([]);
      }
      cbf(JSON.parse(fileContent));
    });
  }
};

FOR THE CONTROLLER WITH ARRAY AND FILE-SYSTEM

const User = require("../models/user");


// SIGNUP CONTROLLER
const signup = (req, res, next) => {
  const name = req.body.name;
  const email = req.body.email;
  const password = req.body.password;
  const user = new User(name, email, password);
  user.save();
  res.status(201).json({
    message: "Signup successful !",
    user: user,
  });
};

// GET USERS CONTROLLER
// const getUsers = (req, res, next) => {
//   const users = User.fetchAll();
//   res.status(200).json({
//     message: "All users",
//     users: users,
//   });
// };
// The above is for working with array

const getUsers = (req, res, next) => {
  User.fetchAll((users) => {
    res.status(200).json({
      message: "All users",
      users: users,
    });
  });
};
// The above is for storing data with file which has a callback



FOR THE MODEL WITH MYSQL QUERYING WITHOUT ORM

// Working with MYSQL Database Query directly without an ORM
// const db = require("../util/database");

module.exports = class User {
  constructor(username, email, password) {
    this.name = username;
    this.email = email;
    this.password = password;
  }

  save() {
    return db.execute(
      "INSERT INTO users (name, email, password) VALUES (?, ?, ?) ",
      [this.name, this.email, this.password]
    );
  }

  static fetchAll() {
    return db.execute("SELECT * FROM users");
  }

  static findById(id) {
    return db.execute("SELECT * FROM users WHERE users.id= ?", [id]);
  }

  static updateById(id) {
    return db.execute("UPDATE users SET name =?, email =?, password =?  WHERE users.id = ?", [id]);
  }
  static deleteById(id) {
    return db.execute("DELETE FROM users WHERE users.id= ?", [id]);
  }
};

FOR THE CONTROLLER WITH MYSQL QUERYING WITHOUT ORM

// WORKING WITH SQL QUERY LANGUAGE
const HttpError = require("../models/http-error");
const { validationResult } = require("express-validator");
const User = require("../models/user");

// SIGNUP CONTROLLER
const signup = (req, res, next) => {
  const name = req.body.name;
  const email = req.body.email;
  const password = req.body.password;
  const user = new User(name, email, password);
  user
    .save()
    .then((uzer) => {
      // console.log(uzer[0]);
      res.status(201).json({
        message: "Signup successful !",
        user: uzer[0],
      });
    })
    .catch((err) => console.log(err));
};

// GET ALL USERS CONTROLLER
const getUsers = (req, res, next) => {
  User.fetchAll()
    // .then(([rows, fieldData]) => {
    //   res.status(200).json({
    //     message: "All users",
    //     users: rows,
    //   });
    // })
    .then((results) => {
      res.status(200).json({
        message: "All users",
        users: results[0],
      });
    })
    .catch((err) => console.log(err));
};

// GET A SINGLE USER
const getUser = (req, res, next) => {
  const userId = req.params.userId;
  User.findById(userId)
    .then(([user]) => {
      res.status(200).json({
        message: "Single user",
        user: user[0],
      });
    })
    .catch((err) => console.log(err));
};

// EDIT A SINGLE USER
const updateUser = (req, res, next) => {
  const userId = req.params.userId;
  const { name, email, password } = req.body;
  let updatedUser;

  User.findById(userId)
    .then(([updatedUser]) => {
      updatedUser.name = name;
      updatedUser.email = email;
      updatedUser.password = password;
      console.log(updatedUser);
      return updatedUser.save();
    })
    .then((updatedUser) => {
      res.status(200).json({
        message: "User updated successfully",
        user: updatedUser,
      });
    })
    .catch((err) => console.log(err));
};

// DELETE A SINGLE USER
const deleteUserById = (req, res, next) => {
  const userId = req.params.userId;
  User.deleteById(userId)
    .then(([user]) => {
      console.log(user);
      res.status(200).json({
        message: "Deleted user Successful",
        user: user,
      });
    })
    .catch((err) => console.log(err));
};

// LOGIN CONTROLLER
const login = (req, res, next) => {
  res.json({ message: "Yeah, I bet you , we are comming there!" });
};

exports.signup = signup;
exports.getUsers = getUsers;
exports.getUser = getUser;
exports.editUser = updateUser;
exports.deleteUser = deleteUserById;
exports.login = login;




USERS CONTROLLER WITHOUT INPUT VALIDATION

const HttpError = require("../models/http-error");
const User = require("../models/user");

// @route POST api/user/signup
// @desc To create or signup a user
// @access Public
const signup = (req, res, next) => {
  const name = req.body.name;
  const email = req.body.email;
  const password = req.body.password;

  if (!name || !email || !password) {
    return next(new HttpError("Input missing required fields.", 400));
  }
  User.findOne({ where: { email: email } }).then((user) => {
    if (user) {
      return next(new HttpError("A user with this email does  exist .", 422)); //422 code is used for invalid inputs
    }
  });

  User.create({
    name: name,
    email: email,
    password: password,
  })
    .then((uzer) => {
      res.status(201).json({
        status: "Successful",
        msg: "User Signedup !",
        user: uzer,
      });
    })
    .catch((err) => {
      console.log(err);
    });
};

// @route POST api/user/login
// @desc To authenticate or login an already registered  user
// @access Public
const login = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;
  let loadedUser;

  if (!email || !password) {
    return next(
      new HttpError("Request missing username or password parameters.", 400)
    );
  }

  User.findOne({ where: { email: email } })
    .then((user) => {
      if (!user || user.password !== password) {
        return next(
          new HttpError("A user with this credential does not exist .", 401)
        );
      }
      return res.status(200).json({
        status: "Successful",
        msg: "Now you are logged in",
        user: user,
      });
    })

    .catch((err) => console.log(err));
};

exports.signup = signup;
exports.login = login;







ADMIN ROUTE BEFORE IMPLEMENTING EXPRESS VALIDATION 

const express = require("express");
const { check } = require("express-validator");

const adminController = require("../controllers/admin-controller");

const router = express.Router();

// /api/admin/users/property => POST
router.post("/property", adminController.createProperty);

// /api/admin/properties => GET
router.get("/properties", adminController.getProperties);

// /api/admin/properties/propertyId => GET
router.get("/properties/:propertyId", adminController.getPropertiesById);

// /api/admin/properties/propertyId => PUT
router.put("/properties/:propertyId", adminController.updatePropertiesById);

// /api/admin/properties/propertyId => DELETE
router.delete("/properties/:propertyId", adminController.deletePropertiesById);

// /api/admin/users => GET
router.get("/users", adminController.getUsers);

// /api/admin/users/userId => GET
router.get("/users/:userId", adminController.getUserById);

// /api/admin/users/userId => DELETE
router.delete("/users/:userId", adminController.deleteUserById);

module.exports = router;